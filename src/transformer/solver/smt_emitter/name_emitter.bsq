namespace SMTEmit;

entity SMTEncodingSymbol {
    const coloncolon = "@cc-";
    const comma = "@c-";
    const commaspace = "@c_-";
    const lparen = "@lp-";
    const rparen = "@rp-";
    const lbracket = "@lb-";
    const rbracket = "@rb-";
    const langle = "@la-";
    const randle = "@ra-";
}

function smtifyNamespace(ns: TreeIR::NamespaceIdentifier): String {
    return ns.value();
}

function smtifyType(tkey: TreeIR::TypeKey): String {
    //eplace special characters with @enc@
    return ii.value();
}

function smtifyIdentifier(ii: TreeIR::Identifier): String {
    return ii.value();
}


function smtifyInvokeKey(ii: TreeIR::InvokeKey): String {
    //TODO: replace special characters with @enc@
    return ii.value();
}

function emitTypeName(tkey: TreeIR::TypeKey): String {
    //TODO: mapping from types to special names and/or cleaning
    if(tkey === "None"TreeIR::TypeKey) {
        return "None";
    }
    else if(tkey === "Bool"TreeIR::TypeKey) {
        return "Bool";
    }
    else if(tkey === "Int"TreeIR::TypeKey) {
        return "Int";
    }
    else if(tkey === "Nat"TreeIR::TypeKey) {
        return "Int";
    }
    else if(tkey === "BigInt"TreeIR::TypeKey) {
        return "Int";
    }
    else if(tkey === "BigNat"TreeIR::TypeKey) {
        return "Int";
    }
    else if(tkey === "Rational"TreeIR::TypeKey) {
        return "@Rational";
    }
    else if(tkey === "Float"TreeIR::TypeKey) {
        return "@Float";
    }
    else if(tkey === "Decimal"TreeIR::TypeKey) {
        return "@Decimal";
    }
    else if(tkey === "String"TreeIR::TypeKey) {
        return "String";
    }
    else if(tkey === "ASCIIString"TreeIR::TypeKey) {
        return "String";
    }
    else if(tkey === "ByteBuffer"TreeIR::TypeKey) {
        return "(Seq (_ BitVec 8))";
    }

    else {
        //let ttype = this.assembly.typeMap.get(tt);
        //match on type options here
        return smtifyType(tkey);
    }
}

function typeEncodedAsUnion(tt: TreeIR::TypeKey): Bool {
    let ttype = this.assembly.typeMap.get(tt);
    return (ttype?TreeIR::ConceptType || ttype?TreeIR::UnionType);
}
